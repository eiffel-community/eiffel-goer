{
// Copyright 2021 Axis Communications AB.
//
// For a full list of individual contributors, please see the commit history.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package query
}

Query <- conditions:Conditions EOF {
    return conditions, nil
}

Conditions <- first:Condition more:( '&' Condition )* EOF {
    conditions := []Condition{
        first.(Condition),
    }
    for _, condTail := range toIfaceSlice(more) {
        condTailSlice := toIfaceSlice(condTail)
        conditions = append(conditions, condTailSlice[1].(Condition))
    }
    return conditions, nil
}

Condition <- field:Field op:Op value:Value {
    return Condition{
        Field: field.(string),
        Op:    op.(string),
        Value: value.(string),
    }, nil
} / typeConv:TypeCastOp '(' field:Field ')' op:Op value:Value {
    return Condition{
        Field:    field.(string),
        Op:       op.(string),
        Value:    value.(string),
        TypeConv: typeConv.(string),
    }, nil
} / '!' field:Field {
    return Condition {
        Field:    field.(string),
        Op:       "exists",
        Value:    "false",
        TypeConv: "bool",
    }, nil
} / field:Field {
    return Condition {
        Field:    field.(string),
        Op:       "exists",
        Value:    "true",
        TypeConv: "bool",
    }, nil
}

Field <- [a-zA-Z0-9]+ ( '.' [a-zA-Z0-9]+ )* {
    return string(c.text), nil
}

TypeCastOp <- ( "int" / "double" ) {
    return string(c.text), nil
}

Op <- ( "!=" / "%3C=" / "%3E=" / "%3C" / "%3E" / "=" ) {
    s, err := url.QueryUnescape(string(c.text))
    if err != nil {
        return nil, err
    }
    return s, nil
}

Value <- [^&]* {
    return string(c.text), nil
}

EOF <- !.
